{"backend_state":"ready","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-808d09e2-0238-4d65-b855-80382607955f.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"last_backend_state":1743064110321,"last_ipynb_save":1743064175144,"trust":true,"type":"settings"}
{"cell_type":"markdown","id":"376924","input":"## AES \\- ECB Mode \\(Electronic Codebook\\)\n\n","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7020ca","input":"**Exercise**\n\nPerform an encryption combined with the hash value of the key.\n","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"788a4f","input":"## AES \\- CFB Mode \\(Cipher Feedback\\)\n\n","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"880f19","input":"# Advanced Encryption Standard \\(AES\\)\n\nAES is a symmetric encryption algorithm operates on fixed\\-size 16\\-byte blocks and supports key sizes of 128, 192, or 256 bits. AES provides strong security through multiple encryption rounds that involve substitution, permutation, and mixing operations.  \n\nAES supports different modes of operation, including ECB, CBC, CFB, OFB, CTR, and GCM, each offering different security and performance properties. CTR and GCM modes turn AES into a stream cipher, eliminating the need for padding, while GCM adds authentication to detect tampering. Here we will implement each of the modes of operation to encrypt the data.\n","pos":-1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e4c205","input":"## AES \\- OFB Mode \\(Output Feedback\\)\n\n","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e664ea","input":"## AES \\- GCM \\(Galois/Counter Mode\\)\n\n","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f0a3c0","input":"## AES \\- CTR Mode \\(Counter\\)\n\n","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fb2047","input":"## AES \\- CBC Mode \\(Cipher Block Chaining\\)\n\n","pos":3,"state":"done","type":"cell"}
{"end":1743023842714,"id":"705369","input":"from Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad, unpad\nfrom Crypto.Util import Counter\nimport secrets\n\n\nkey = b'0123456789abcdef'  # 16-byte key\niv = b'0123456789abcdef'\ndata = b'aaaaaaaaaaaaaaa'","kernel":"python3","last":585,"pos":0,"start":1743023842711,"state":"done","type":"cell"}
{"end":1743023845466,"id":"699f98","input":"cipher = AES.new(key, AES.MODE_ECB)\nencrypted = cipher.encrypt(pad(data, AES.block_size)).hex()\nprint(\"ECB Encrypted:\", encrypted)\n\ndecipher = AES.new(key, AES.MODE_ECB)\ndecrypted = unpad(decipher.decrypt(bytes.fromhex(encrypted)), AES.block_size)\n#print(\"Decrypted:\", decrypted)\nassert decrypted == data\n","kernel":"python3","last":3,"pos":2,"start":1743023845463,"state":"done","type":"cell"}
{"end":1743023846557,"id":"0a463a","input":"cipher = AES.new(key, AES.MODE_CBC, iv)\nencrypted = cipher.encrypt(pad(data, AES.block_size)).hex()\nprint(\"CBC Encrypted:\", encrypted)\n\ndecipher = AES.new(key, AES.MODE_CBC, iv)\ndecrypted = unpad(decipher.decrypt(bytes.fromhex(encrypted)), AES.block_size)\n#print(\"Decrypted:\", decrypted)\nassert decrypted == data","kernel":"python3","pos":4,"start":1743023846554,"state":"done","type":"cell"}
{"end":1743023848372,"id":"5587fb","input":"cipher = AES.new(key, AES.MODE_CFB, iv)\nencrypted = cipher.encrypt(pad(data, AES.block_size)).hex()\nprint(\"CFB Encrypted:\", encrypted)\n\ndecipher = AES.new(key, AES.MODE_CFB, iv)\ndecrypted = unpad(decipher.decrypt(bytes.fromhex(encrypted)), AES.block_size)\n#print(\"Decrypted:\", decrypted)\nassert decrypted == data","kernel":"python3","pos":6,"start":1743023848366,"state":"done","type":"cell"}
{"end":1743023848379,"id":"8da151","input":"cipher = AES.new(key, AES.MODE_OFB, iv)\nencrypted = cipher.encrypt(pad(data, AES.block_size)).hex()\nprint(\"OFB Encrypted:\", encrypted)\n\ndecipher = AES.new(key, AES.MODE_OFB, iv)\ndecrypted = unpad(decipher.decrypt(bytes.fromhex(encrypted)), AES.block_size)\n#print(\"Decrypted:\", decrypted)\nassert decrypted == data","kernel":"python3","pos":8,"start":1743023848376,"state":"done","type":"cell"}
{"end":1743023848765,"id":"b5c2d2","input":"ctr = Counter.new(128)\ncipher = AES.new(key, AES.MODE_CTR, counter=ctr)\nencrypted = cipher.encrypt(data).hex()\nprint(\"CTR Encrypted:\", encrypted)\n\ndecipher = AES.new(key, AES.MODE_CTR, counter=Counter.new(128))\ndecrypted = decipher.decrypt(bytes.fromhex(encrypted))\n#print(\"Decrypted:\", decrypted)\nassert decrypted == data","kernel":"python3","last":4,"pos":10,"start":1743023848757,"state":"done","type":"cell"}
{"end":1743023860965,"id":"e0be3b","input":"cipher = AES.new(key, AES.MODE_GCM)\nciphertext, tag = cipher.encrypt_and_digest(data)\nprint(\"GCM Encrypted:\", ciphertext.hex())\nprint(\"GCM Tag:\", tag.hex())\n\n# Decryption\ndecipher = AES.new(key, AES.MODE_GCM, nonce=cipher.nonce)\ndecrypted = decipher.decrypt_and_verify(ciphertext, tag)\n#print(\"Decrypted:\", decrypted)\nassert decrypted == data","kernel":"python3","last":5,"pos":13,"start":1743023860958,"state":"done","type":"cell"}
{"id":0,"time":1743060471363,"type":"user"}
{"last_load":1743023345601,"type":"file"}